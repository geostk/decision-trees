import argparse
import ast
from .constants import *

# helping methods
def evalTF(string):
	return ast.literal_eval(string.title())

# Default parser
DEFAULT_PARSER = argparse.ArgumentParser(
	# prog = 'decision-tree.py'
	# usage = (generated by default)
	description = """Given a dataset either from local or remote origins,
	analyzes the data to generate a decision tree that will be able to classify
	the data according to the attribute specified and finally validate the
	accuracy against a training set, or trying to classify random examples""",
	epilog = "<> with â™¥ in ETSE UAB by ccebrecos, davidlj95 & joel.sanz",
	add_help = True,
	allow_abbrev = True
)
DEFAULT_PARSER.add_argument("-v","--version",
	action="version",
	version="Decision-Tree classifier 0.1 ()")
DEFAULT_PARSER.add_argument("-d","--dataset",
	action="store",
	nargs="?",
	help="""specifies the dataset to load (default is %s)"""%\
		DATASET_DEFAULT,
	type=str,
	choices=DATASETS,
	default=DATASET_DEFAULT,
)
DEFAULT_PARSER.add_argument("--show-dataset",
	metavar="true|false",
	action="store",
	nargs="?",
	help="""enables or disables printing the dataset information (%s
	by default)"""%("enabled" if SHOW_DATASET_DEFAULT else "disabled"),
	type=evalTF,
	const=True,
	default=SHOW_DATASET_DEFAULT
)
DEFAULT_PARSER.add_argument("--show-tree",
	metavar="true|false",
	action="store",
	nargs="?",
	help="""enables or disables printing the decision tree to screen (%s
	by default)"""%("enabled" if SHOW_TREE_DEFAULT else "disabled"),
	type=evalTF,
	const=True,
	default=SHOW_TREE_DEFAULT
)
DEFAULT_PARSER.add_argument("-a","--algorithm",
	action="store",
	help="""sets the algorithm to use to classify the training set into a
	decision tree. Default is %s"""%ALGORITHM_DEFAULT,
	type=str,
	choices=ALGORITHMS,
	default=ALGORITHM_DEFAULT
)
DEFAULT_PARSER.add_argument("-c","--classifier",
	metavar="variable",
	action="store",
	help="""sets the classifier variable to use to generate the decision tree.
	It has to be a column from the dataset. By default, we use the column %d
	of the dataset)"""%TARGET_DEFAULT,
	type=int,
	default=TARGET_DEFAULT
)
DEFAULT_PARSER.add_argument("-t",
	action="count",
	help="""records the algorithm's computation time and shows them. You can
	add levels of timings by specifying repeating argument. Default timing
	level is %d"""%TIMERS_DEFAULT,
	default = TIMERS_DEFAULT
)
DEFAULT_PARSER.add_argument("-l","--log-level",
	metavar="level",
	action="store",
	help="""specifies the level of events to log. events upper from that level
	will be displayed. Default is %s"""%(LOG_DEFAULT),
	type=str,
	choices=LOGS,
	default=LOG_DEFAULT
)
DEFAULT_PARSER.add_argument("-p","--percent",
	metavar="%",
	action="store",
	help="""percentage (expressed between 0 and 1) that sets how many items will
	be sent to the training set from the whole dataset if no validation set is
	available for the dataset specified. Default is %f"""%
		(TRAINING_PERCENT_DEFAULT),
	type=float,
	default=TRAINING_PERCENT_DEFAULT
)
